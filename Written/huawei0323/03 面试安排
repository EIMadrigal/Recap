给一个面试官数组A和面试者数组B，每个面试官只能面x个人，每个人至少要被2个不同的面试官面，问是否存在满足所有面试者的安排，输出其中一种，否则返回false 25%
我是直接贪心的，记录每个面试官的次数和面试者的次数，遍历每个面试者看是否存在满足要求的面试官

m个面试官，n个学生去面试，每个面试官最多面试k次。
每个面试官会若干种语言，每个学生只会1种语言，每个学生必须被面试到2次。
问有无一种方法，让每个学生都被面试完，如果有，输出true和该方法（矩阵输出，第i个面试官面试第j个学生，则match[i] [j] = 1，否则为0），如果没有，输出false；

输入：
4 6 4
java c py
py
c java
py
java
py
c
py
c
java

输出：true
[1, 0, 1, 0, 1, 1]
[0, 1, 0, 1, 0, 0]
[1, 0, 1, 0, 1, 1]
[0, 1, 0, 1, 0, 0]

先将面试官和面试者的输入记录到一个矩阵match

#include <iostream>
#include <vector>
#include <string>
#include <sstream>
using namespace std;

int m, n, x;

bool check(vector<vector<int>>& ans) {
    for (int i = 0; i < m; ++i) {
        int cnt = 0;
        for (int j = 0; j < n; ++j) {
            cnt += ans[i][j];
        }
        if (cnt > x) {
            return false;
        }
    }
    for (int j = 0; j < n; ++j) {
        int cnt = 0;
        for (int i = 0; i < m; ++i) {
            cnt += ans[i][j];
        }
        if (cnt != 2) {
            return false;
        }
    }
    return true;
}

bool backtrack(vector<vector<int>>& match, vector<vector<int>>& ans, int id) {
    if (id >= m * n) {
        if (!check(ans)) {
            return false;
        }
        return true;
    }
    int x = id / n, y = id % n;
    if (match[x][y] == 1) {
        ans[x][y] = 0;
        if (backtrack(match, ans, id + 1))
            return true;
        ans[x][y] = 1;
        if (backtrack(match, ans, id + 1))
            return true;
        return false;
    }
    else {
        return backtrack(match, ans, id + 1);
    }
}

// cin读不到回车 getline可以读到
int main() {
    cin >> m >> n >> x;
    cin.ignore();
    vector<vector<string>> viewer(m);
    string tmp;
    for (int i = 0; i < m; ++i) {
        string str;
        getline(cin, tmp);
        istringstream iss(tmp);
        while (iss >> str) {
            viewer[i].push_back(str);
        }
    }

    vector<vector<int>> match(m, vector<int>(n, 0));
    vector<vector<int>> ans(m, vector<int>(n, 0));
    
    for (int i = 0; i < n; ++i) {
        cin >> tmp;
        for (int j = 0; j < m; ++j) {
            for (int k = 0; k < viewer[j].size(); ++k) {
                if (tmp == viewer[j][k]) {
                    match[j][i] = 1;
                }
            }
        }
    }

    bool yep = backtrack(match, ans, 0);
    if (yep) {
        cout << "true" << endl;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                cout << ans[i][j];
                if (j < n - 1) {
                    cout << " ";
                }
            }
            cout << endl;
        }
    }
    else {
        cout << "false" << endl;
    }

    return 0;
}
