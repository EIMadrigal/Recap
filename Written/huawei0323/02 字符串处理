给一个字符串0F04ABABABAB和一些查询tag，问这些tag对应的长度和offset，不存在返回0 0 95%

一串十六进制串，两个字符为1字节，字符串最大长度为10000。

分为很多段，每段开头有个两个字符（1字节）组成的tag，之后是1字节的length，标识着之后的数据段的长度（单位：字节）。

输入n，之后输入n个tag值，依次去字符串中匹配，若tag匹配，则输出该段的长度和数据在整个字符串中的偏移量（单位：字节）。

注意：字符串中的tag和给定的tag数组中的数都是递增的。字符串末尾有可能有多余数据，需要去掉。

输入：0F04ABABABAB，n=1，tags=[15]

输出：4 2（tag15刚好能和字符串中第一段的0F匹配，计算04的长度为4，数据串ABABABAB开始的下标为4，由于两个字符代表1个字节，因此偏移量为2）

#include <iostream>
#include <string>
#include <unordered_map>
#include <utility>  // std::pair
using namespace std;

int main() {
    string s;
    cin >> s;

    unordered_map<int, pair<int, int>> m;
    int i = 0;
    while (i < s.length()) {
        if (i + 4 >= s.length()) {
            break;
        }
        int tag = stoi(s.substr(i, 2), nullptr, 16);
        int len = stoi(s.substr(i + 2, 2), nullptr, 16);
        if (i + 4 + 2 * len > s.length()) {
            break;
        }
        m[tag] = {len, i / 2 + 2};
        i = i + 4 + 2 * len;
    }

    int n, tmp;
    cin >> n;
    for (int i = 0; i < n; ++i) {
        cin >> tmp;
        if (m.find(tmp) != m.end()) {
            cout << m[tmp].first << " " << m[tmp].second << endl;
        }
        else {
            cout << 0 << " " << 0 << endl;
        }
    }
    return 0;
}
